// Code generated by MockGen. DO NOT EDIT.
// Source: utils/user_utils.go

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"
	schema "user/schema"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserUtils is a mock of IUserUtils interface.
type MockIUserUtils struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUtilsMockRecorder
}

// MockIUserUtilsMockRecorder is the mock recorder for MockIUserUtils.
type MockIUserUtilsMockRecorder struct {
	mock *MockIUserUtils
}

// NewMockIUserUtils creates a new mock instance.
func NewMockIUserUtils(ctrl *gomock.Controller) *MockIUserUtils {
	mock := &MockIUserUtils{ctrl: ctrl}
	mock.recorder = &MockIUserUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUtils) EXPECT() *MockIUserUtilsMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserUtils) CreateUser(username, email, hashedPassword string) (schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, email, hashedPassword)
	ret0, _ := ret[0].(schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserUtilsMockRecorder) CreateUser(username, email, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserUtils)(nil).CreateUser), username, email, hashedPassword)
}

// GetUserByEmail mocks base method.
func (m *MockIUserUtils) GetUserByEmail(email string) (schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserUtilsMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserUtils)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockIUserUtils) GetUserByID(userID uint) (schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIUserUtilsMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserUtils)(nil).GetUserByID), userID)
}

// HashPassword mocks base method.
func (m *MockIUserUtils) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIUserUtilsMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIUserUtils)(nil).HashPassword), password)
}

// RequestForgetpassVerificationEmail mocks base method.
func (m *MockIUserUtils) RequestForgetpassVerificationEmail(userID uint, username, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestForgetpassVerificationEmail", userID, username, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestForgetpassVerificationEmail indicates an expected call of RequestForgetpassVerificationEmail.
func (mr *MockIUserUtilsMockRecorder) RequestForgetpassVerificationEmail(userID, username, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestForgetpassVerificationEmail", reflect.TypeOf((*MockIUserUtils)(nil).RequestForgetpassVerificationEmail), userID, username, email)
}

// RequestRegisterVerificationEmail mocks base method.
func (m *MockIUserUtils) RequestRegisterVerificationEmail(userID uint, username, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestRegisterVerificationEmail", userID, username, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestRegisterVerificationEmail indicates an expected call of RequestRegisterVerificationEmail.
func (mr *MockIUserUtilsMockRecorder) RequestRegisterVerificationEmail(userID, username, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestRegisterVerificationEmail", reflect.TypeOf((*MockIUserUtils)(nil).RequestRegisterVerificationEmail), userID, username, email)
}

// SetUserEmailVerified mocks base method.
func (m *MockIUserUtils) SetUserEmailVerified(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserEmailVerified", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserEmailVerified indicates an expected call of SetUserEmailVerified.
func (mr *MockIUserUtilsMockRecorder) SetUserEmailVerified(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserEmailVerified", reflect.TypeOf((*MockIUserUtils)(nil).SetUserEmailVerified), email)
}

// StoreEncryptedTOTPSecret mocks base method.
func (m *MockIUserUtils) StoreEncryptedTOTPSecret(userID uint, encryptedSecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEncryptedTOTPSecret", userID, encryptedSecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEncryptedTOTPSecret indicates an expected call of StoreEncryptedTOTPSecret.
func (mr *MockIUserUtilsMockRecorder) StoreEncryptedTOTPSecret(userID, encryptedSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEncryptedTOTPSecret", reflect.TypeOf((*MockIUserUtils)(nil).StoreEncryptedTOTPSecret), userID, encryptedSecret)
}

// ValidatePassword mocks base method.
func (m *MockIUserUtils) ValidatePassword(password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockIUserUtilsMockRecorder) ValidatePassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockIUserUtils)(nil).ValidatePassword), password)
}
